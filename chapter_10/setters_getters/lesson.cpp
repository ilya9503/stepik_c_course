/*
    Структуры. Режимы доступа. Сеттеры и геттеры
    Обычно значение полей структуры можно задать через .

    Но иногда это нежелательное поведение, например если поля структуры лежат в диапазоне
    И случайно можно задать зн-е вне диапазона

    Для этого в структурах и классах языка С++ дополнительно можно определять режимы доступа
        к тем или иным полям структуры (класса).
    На данный момент мы рассмотрим два таких режима:
        public – публичный доступ к переменным и методам;
        private – частный (закрытый) доступ к переменным и методам.

    И еще одно важное замечание. Защита private определяется на уровне типа данных – структуры целиком,
        а не на уровне отдельных объектов.

    this - неявный указатель на текущий объект

    по умолчанию все поля структуры имеют режим доступа public

*/

#include <iostream>
#include <math.h>
 
using std::cout;
using std::endl;
 
struct point {
private:        // закрываем доступ извне структуры. Методы внутри структуры могут обращаться к х и y
    int x, y;
public:
    double length() { return sqrt(x*x + y*y); }

    void sum(const point& pt)
    {
        this->x += pt.x;
        this->y += pt.y;
    }
    
    // Сеттеры. Функции задания значений приватных полей структуры. Только через сеттер можем задать извне
    void set_coords(int x, int y) 
    { 
        if(x < -100 || x > 100 || y < -100 || y > 100)
            return;
 
        this->x = x; // this - неявный указатель на текущий объект
        this->y = y; 
    }

    // Геттеры. Функции получения значений приватных полей структуры. Только через геттер можем читать извне
    void get_coords(int& x, int& y) {x = this->x; y = this->y; }
    int get_x() { return this->x; }
    int get_y() { return this->y; }
};
 
int main()
{
    point pt;
    // будет работать только с public-данными и кодом
    // struct point pt {1, 2};
    // pt.x = 10;
    // pt.y = 20;
    pt.set_coords(1, 2);    // задаем private поля

    cout << "x = " << pt.get_x() << "; " << "y = " << pt.get_y() << "; " << "length = " << pt.length() << endl;
    return 0;
}