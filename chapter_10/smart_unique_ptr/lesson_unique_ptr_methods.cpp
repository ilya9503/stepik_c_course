/*
    Smart-указатели типа unique_ptr имеют ряд полезных методов:
        get() – возвращает «сырой» указатель на выделенную область памяти;
        release() – возвращает указатель на выделенную область памяти и «отвязывает» smart-указатель от нее;
        reset() – меняет значение указателя на другую область памяти, либо на значение nullptr, если ничего не указано;
        swap() – выполняет обмен адресами smart-указателей между собой.
*/
#include <iostream>
#include <memory>   // smart-указатели

int main()
{
    /*
        Создаем шаблон умного указателя типа int ptr
        Выделяем под него область памяти типа int, и заносим туда начальное значение 11 (не адрес)
        std::make_unique<int>() - инициализирует значение 0
        release() – не освобождает память. Только обнуляет адрес умного указателя, область памяти продолжает существовать
        reset() - меняет одну область памяти на другую. Старая область освобождается!

    */
    std::unique_ptr<int> ptr {std::make_unique<int>(11)};     // создаем умный указатель и выделяем под него память с помощью make_unique
    std::unique_ptr<int> ptr_2 {new int {-6}};
    std::unique_ptr<int> ptr_3 {nullptr};

    int* p = ptr.get(); // получаем адрес, который хранится в ptr
    std::cout << "Метод get(): " << p << " " << *p << std::endl;

    p = ptr.release();  // освобождаем адрес, который хранится в ptr. При этом в p он сохранился 
    std::cout << "Метод release(): " << ptr.get() << " " << p << " " << *p << std::endl;

    ptr.reset();
    std::cout << "Метод reset(): " << ptr.get() << std::endl;

    ptr.reset(new int {143});
    std::cout << "Метод reset(): " << ptr.get() << " " << *ptr << std::endl;

    ptr.swap(ptr_2);
    std::cout << "Метод swap(): " << *ptr << " " << *ptr_2 << std::endl;
    

    return 0;
}