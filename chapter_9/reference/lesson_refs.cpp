/*
    Ссылки

    Ссылка - псевдоним для существующей переменной, который позволяет работать с этой переменной
        через новое имя

    lvalue-выражение (Left Value) - это выражение, которое имеет адрес в памяти, можно
        использовать слева от оператора присваивания
    rvalue-выражение (Right Value) - это временное выражение, которое не имеет адреса в памяти
        или существует только в течение одного выражения

    Следующее важное нововведение языка С++ - это ссылки.
    Объявляются они так же, как и обычные переменные, только
        после типа следует поставить символ амперсанда.
    

    В итоге, с ячейками памяти, где хранится значение переменной d,
        связано теперь два имени: d и lnk_d.
    Ссылку можно воспринимать, как неявный указатель, который хранит адрес переменной,
        записанной при инициализации.
    В результате, мы через ссылку lnk_d можем выполнять все те же самые действия,
        что и с переменной d.

    Причем одна ссылка может быть связана только с одной переменной
        (с одним элементом данных) и связь эта прописывается в момент ее инициализации.
*/
#include <iostream>

// Классическая задача обмена значениями двух переменных без указателей
// Ничего не возвращает, не копирует аргументы в параметры, не нужно прописывать & у аргументов при вызове
void swap_d(double& x, double& y)
{
    double t = x;
    x = y;
    y = t;
}

int main()
{
    int d = 10;
    int& lnk_d = d;  // ссылка с именем lnk_d на переменную d
    int& lnk_d2 {d};
    int& lnk_d3 (d);

    lnk_d = 5;  // переменная d = 5
    d = -1;     // ссылка lnk_d связана со значением -1
    lnk_d *= 10; // значение d увеличено в 10 раз
    lnk_d++;  // инкремент переменной d

    //double& alias_d;    // ошибка, ссылка должна быть инициализирована

    int a = 10;
    int *ptr = &a;
    int ar[] = {1, 2, 3};
     
    int& lnk_1 = a;       // ok
    int& lnk_2 = *ptr;    // ok
    int& lnk_3 = ar[1];   // ok
    //int& lnk_4 = 10;      // ошибка, используется rvalue, а можно только lvalue
    //int& lnk_5 = ptr;     // ошибка, отличается тип (ссылка на int, а не int*)

    double n1{1.2}, n2{-3.4};
    swap_d(n1, n2);        // вызов с использованием ссылок


    return 0;
}